printf(3) - man Holbi page

NAME
printf
Is the function to do formatted printing.

SYNOPSIS
#include <

int printf(const char* format,...)

DESCRIPTION

The printf function performs received printouts by means of formats.  

        printf("text1 %codeFormat1 textn %codeFormatn",  variable1, variablen);
        
Prints one message per screen using a "format string" that includes instructions 
for mixing multiple strings in the final string to be displayed on the screen.

Printf is a special function because it receives a variable number of parameters.
The first parameter is fixed and is the format string. It includes text to be printed 
literally and marks to be replaced by text obtained from the additional parameters.
Therefore, printf is called with as many parameters as there are marks in the format string
plus the string itself.

Return value




Format of the format string

the format string is made up of information about the output formats.
It consists of individual groups of characters, which must start with the % symbol. 
The conformation of the string is basically given by the igno % followed by the conversion
character, for example %i, this command prints a integer with sign.

#include <stdio.h>

int main(void)
{
    int outgrowth;

    outgrowth = 5+2;
    printf("sum result: %i\n",outgrowth);

    outgrowth = 5-2;
    printf("result of subtraction: %i\n",outgrowth);

    outgrowth = 5*2;
    printf("Multimplication Result: %i\n",outgrowth);

    outgrowth = 5/2;
    printf("Result of the division: %i\n",outgrowth);

    return(0);
}

Remember, every mark, therefore, begins with the symbol "%" and ends with its type.
Each of the names (parameter, flags, width, precision, length and type) represents a set
of possible values that are explained below.

Type	                         Descripción

%c                  Prints the corresponding ASCII character
%d, %i              Decimal conversion with integer sign
%x, %X              Conversión hexadecimal sin signo
%p                  Memory address (pointer)
%e, %E              Conversion to floating point with sign in scientific notation
%f, %F              Conversion to floating point with sign, using decimal point
%g, %G              Conversion to floating point, using the notation that requires the least space
%o                  Unsigned octal conversion of an integer
%u                  Unsigned decimal conversion of an integer
%s                  Character string (ending in '\0')
%%                  Prints the % symbol                      


Flags	            Description

number              Fill in with spaces (or with zeros, see next flag) to the left until the value of the number.

0                   It is filled with leading zeros up to the value given by the previous flag. For example "%03d" 
                    prints a justified number with zeros up to three digits.

+                   Print the sign of a number

-                   Justifies the field to the left (by default we have already said that it is justified to the right)

#                   Formato alternativo. Para reales se dejan ceros al final y se imprime siempre la coma. Para números que
                    no están en base 10, se añade un prefijo denotando la base.


Parameter           Description

n$                  n" is replaced by a number to change the order in which arguments are processed. For example %3$d refers 
                    to the third argument regardless of its place in the format string.    


Width               Description

number              Size of the width of the field where the value will be printed.

*                   Same as the previous case, but the number to be used is passed as parameter just before the value.
                    For example printf("%*d", 5, 10) prints the number 10, but with a width of five digits
                    (i.e. it will fill in with 3 blank spaces on the left).


Precision           Description

number              Decimal part size for real numbers. Number of characters to print for text strings

*                   Same as the previous case, but the number to be used is passed as parameter just before the value.
                    For example printf("%.*s", 3, "abcdef") prints "abc".




EXAMPLE


#include <stdio.h>
#include <stdlib.h>
/**
*
*/
  int numint=65; long numLong =2155;

  float numFloat=8.21; double numDouble=6.1226;

  char Char='c'; char string []= "This is a string";

    printf ("numint value %d\n", numint);

    printf ("numLong value %ld\n", numLong);

    printf ("numFloat value %f\n", numFloat);

    printf ("numDouble value %lf\n", numDouble);

    printf ("Char value %c\n", Char);

    printf ("string value %s\n", string);

    return 0;
}


EXIT STATUS - El significado de los distintos códigos de salida.
FILES - Fichero relacionados con el comando o función.
BUGS - Problemas que el comando o función que están pendientes de ser subsanados. También conocido como KNOWN BUGS.

SEE ALSO 

printf(1), asprintf(3), dprintf(3), scanf(3), setlocale(3), wcrtomb(3), wprintf(3), locale(5)


AUTHOR, HISTORY, COPYRIGHT, LICENSE, WARRANTY - Información sobre el programa, su pasado, sus términos de uso, y su creador.git